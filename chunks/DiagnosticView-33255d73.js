import{d as l,_ as m,o as t,c as i,a,t as s,n as d,r as n,f,F as u,b as M,j as D,e as p,w as L,g as y}from"./main-137adb52.js";import{A as B,M as A,a as N}from"./OManual.vue_vue_type_style_index_0_lang-16a282d4.js";import{_ as S}from"./ComputedGamepads.vue_vue_type_script_lang-1f3191ff.js";const w=l({name:"MDiagnosticItem",props:{gamepad:{type:Object,required:!0},timestamp:{type:Number,required:!0}}}),V={class:"output-gamepad"},R={class:"gamepad-group"};function T(e,v,c,g,r,b){return t(),i("div",V,[a("h3",null,"#"+s(e.gamepad.device.index+1)+". "+s(e.gamepad.device.id),1),a("div",R,[a("div",null,[a("span",{class:d([e.gamepad.device.buttons[0].value===1?"pressed":""])}," A: "+s(e.gamepad.device.buttons[0].value.toFixed(2)),3),a("span",{class:d([e.gamepad.device.buttons[1].value===1?"pressed":""])}," B: "+s(e.gamepad.device.buttons[1].value.toFixed(2)),3),a("span",{class:d([e.gamepad.device.buttons[2].value===1?"pressed":""])}," X: "+s(e.gamepad.device.buttons[2].value.toFixed(2)),3),a("span",{class:d([e.gamepad.device.buttons[3].value===1?"pressed":""])}," Y: "+s(e.gamepad.device.buttons[3].value.toFixed(2)),3)]),a("div",null,[a("span",{class:d([e.gamepad.device.buttons[4].value===1?"pressed":""])}," LB: "+s(e.gamepad.device.buttons[4].value.toFixed(2)),3),a("span",{class:d([e.gamepad.device.buttons[5].value===1?"pressed":""])}," RB: "+s(e.gamepad.device.buttons[5].value.toFixed(2)),3),a("span",{class:d([e.gamepad.device.buttons[6].value===1?"pressed":""])}," LT: "+s(e.gamepad.device.buttons[6].value.toFixed(2)),3),a("span",{class:d([e.gamepad.device.buttons[7].value===1?"pressed":""])}," RT: "+s(e.gamepad.device.buttons[7].value.toFixed(2)),3)]),a("div",null,[a("span",{class:d([e.gamepad.device.buttons[8].value===1?"pressed":""])}," Back: "+s(e.gamepad.device.buttons[8].value.toFixed(2)),3),a("span",{class:d([e.gamepad.device.buttons[9].value===1?"pressed":""])}," Start: "+s(e.gamepad.device.buttons[9].value.toFixed(2)),3),a("span",{class:d([e.gamepad.device.buttons[10].value===1?"pressed":""])}," Left Stick: "+s(e.gamepad.device.buttons[10].value.toFixed(2)),3),a("span",{class:d([e.gamepad.device.buttons[11].value===1?"pressed":""])}," Right Stick: "+s(e.gamepad.device.buttons[11].value.toFixed(2)),3)]),a("div",null,[a("span",{class:d([e.gamepad.device.buttons[12].value===1?"pressed":""])}," Forward: "+s(e.gamepad.device.buttons[12].value.toFixed(2)),3),a("span",{class:d([e.gamepad.device.buttons[13].value===1?"pressed":""])}," Backward: "+s(e.gamepad.device.buttons[13].value.toFixed(2)),3),a("span",{class:d([e.gamepad.device.buttons[14].value===1?"pressed":""])}," Left: "+s(e.gamepad.device.buttons[14].value.toFixed(2)),3),a("span",{class:d([e.gamepad.device.buttons[15].value===1?"pressed":""])}," Right: "+s(e.gamepad.device.buttons[15].value.toFixed(2)),3)]),a("div",null,[a("span",null," Left Stick X: "+s(e.gamepad.device.axes[0]?e.gamepad.device.axes[0].toFixed(2):"missing"),1),a("span",null," Left Stick Y: "+s(e.gamepad.device.axes[1]?e.gamepad.device.axes[1].toFixed(2):"missing"),1),a("span",null," Right Stick X: "+s(e.gamepad.device.axes[2]?e.gamepad.device.axes[2].toFixed(2):"missing"),1),a("span",null," Right Stick Y: "+s(e.gamepad.device.axes[3]?e.gamepad.device.axes[3].toFixed(2):"missing"),1)])]),a("span",null," Vibration Actuator: "+s(e.gamepad.device.vibrationActuator?"Available":"Missing"),1)])}const C=m(w,[["render",T]]),O=l({name:"ODiagnostic",mixins:[S],components:{AMessage:B,MToolsNav:A,MGamepadList:N,MDiagnosticItem:C}}),I={key:0,class:"content-item"};function G(e,v,c,g,r,b){const o=n("MToolsNav"),$=n("MDiagnosticItem"),h=n("MGamepadList"),k=n("AMessage");return t(),i(u,null,[f(o),e.gamepads.length>0?(t(),i("div",I,[(t(!0),i(u,null,M(e.gamepads,F=>(t(),p($,{key:F.id,gamepad:F,timestamp:e.timestamp},null,8,["gamepad","timestamp"]))),128))])):D("",!0),e.gamepads.length>0?(t(),p(h,{key:1,gamepads:e.gamepads},null,8,["gamepads"])):(t(),p(k,{key:2},{default:L(()=>[y("Press any gamepad button or connect a new gamepad to vibrate.")]),_:1}))],64)}const X=m(O,[["render",G]]),Y=l({name:"DiagnosticView",components:{ODiagnostic:X}}),j=a("h1",{class:"visually-hidden"},"Wavelovers â€” Diagnostic",-1);function q(e,v,c,g,r,b){const o=n("ODiagnostic");return t(),i(u,null,[j,f(o)],64)}const W=m(Y,[["render",q]]);export{W as default};
